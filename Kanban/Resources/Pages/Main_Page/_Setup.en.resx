<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add and edit fixtures. E.g. add injection mold and specify what products does it produce and how many nests it has" xml:space="preserve">
    <value>Add and edit fixtures. E.g. add injection mold and specify what products does it produce and how many nests it has</value>
  </data>
  <data name="Add and edit machines" xml:space="preserve">
    <value>Add and edit machines</value>
  </data>
  <data name="Add and edit production area" xml:space="preserve">
    <value>Add and edit production area</value>
  </data>
  <data name="Add and edit production cells" xml:space="preserve">
    <value>Add and edit production cells</value>
  </data>
  <data name="Add and edit products assigned to projects" xml:space="preserve">
    <value>Add and edit products assigned to projects</value>
  </data>
  <data name="Add and edit sensors" xml:space="preserve">
    <value>Add and edit sensors</value>
  </data>
  <data name="Add and edit users. Modify users roles" xml:space="preserve">
    <value>Add and edit users. Modify users roles</value>
  </data>
  <data name="ALERT" xml:space="preserve">
    <value>ALERT</value>
  </data>
  <data name="AREA" xml:space="preserve">
    <value>AREA</value>
  </data>
  <data name="Basic information about your manufacturing plant" xml:space="preserve">
    <value>Basic information about your manufacturing plant</value>
  </data>
  <data name="CELL" xml:space="preserve">
    <value>CELL</value>
  </data>
  <data name="CONFIG" xml:space="preserve">
    <value>CONFIG</value>
  </data>
  <data name="Create and edit customers" xml:space="preserve">
    <value>Create and edit customers</value>
  </data>
  <data name="CUSTOMER" xml:space="preserve">
    <value>CUSTOMER</value>
  </data>
  <data name="Define details of alerts" xml:space="preserve">
    <value>Define details of alerts</value>
  </data>
  <data name="Define fixture, machine, and cell combination with given cycle time and other data" xml:space="preserve">
    <value>Define fixture, machine, and cell combination with given cycle time and other data</value>
  </data>
  <data name="FIXTURE" xml:space="preserve">
    <value>FIXTURE</value>
  </data>
  <data name="MACHINE" xml:space="preserve">
    <value>MACHINE</value>
  </data>
  <data name="Manage list of projects related to the customers for whom you deliver products" xml:space="preserve">
    <value>Manage list of projects related to the customers for whom you deliver products</value>
  </data>
  <data name="PLANT SETUP" xml:space="preserve">
    <value>PLANT SETUP</value>
  </data>
  <data name="PRODUCT" xml:space="preserve">
    <value>PRODUCT</value>
  </data>
  <data name="PROJECT" xml:space="preserve">
    <value>PROJECT</value>
  </data>
  <data name="REASON" xml:space="preserve">
    <value>REASON</value>
  </data>
  <data name="REASONS OF MOV." xml:space="preserve">
    <value>REASONS OF MOV.</value>
  </data>
  <data name="Reasons of movement for rework, scrap and machine failures" xml:space="preserve">
    <value>Reasons of movement for rework, scrap and machine failures</value>
  </data>
  <data name="SENSOR" xml:space="preserve">
    <value>SENSOR</value>
  </data>
  <data name="Setup" xml:space="preserve">
    <value>Setup</value>
  </data>
  <data name="SHIFT SETTINGS" xml:space="preserve">
    <value>SHIFT SETTINGS</value>
  </data>
  <data name="Shift start time" xml:space="preserve">
    <value>Shift start time</value>
  </data>
  <data name="USER" xml:space="preserve">
    <value>USER</value>
  </data>
</root>